# sample config file
# for 'local' run app will read from this file in order to populate OS environment variables
# for all other environments, ansible playbook would create an AWS task definition that would
# then pump these variables and values into the OS Environment for the docker container
# for 'target_app_secrets_ref' the task definition will include the lookup keys, which will be
# fulfilled when the task definition is run
target_app_secrets_ref:
    # either DB_CONFIG, *or* DB_PWD plus all other DB_<> values in target_app_env, are required
  - DB_CONFIG: (REQUIRED) <identifier for a valid aws secret stored in either parameter store or secrets manager>
    DB_PWD: (REQUIRED) <identifier for a valid aws secret stored in either parameter store or secrets manager>
    ECS_APIKEY: (REQUIRED) <identifier for a valid aws secret stored in either parameter store or secrets manager>
    SLACK_APIKEY: (OPTIONAL, but REQUIRED for slack integration) <identifier for a valid aws secret stored in either parameter store or secrets manager>
# for 'target_app_env' the keys and values are exactly included in the task definition
target_app_env:
  # this first set of variables/values is REQUIRED for minimum functioning of the app
  - name: DB_HOST
    value: <some valid db host>
  - name: DB_PORT
    value: <some valid db port>
  - name: DB_INSTANCE
    value: <some valid db service name - for oracle connection>
  - name: DB_USER
    value: <some valid db username>
  - name: APP_NAME
    value: <will appear in swagger documentation, slack integration>
  - name: APP_DESCRIPTION
    value: <will appear in swagger documentation>
    # values after this line are optional and arbitrary
  - name: DB_TABLE_NAME
    value: <SOME_VALID_DB_TABLE_NAME>

# these are used by the adex deploy scripts
deploy_type: app <could also instead be 'job'>
target_app_name: <a valid app name for your build process>
