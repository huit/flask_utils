# sample config file
# for 'local' run app will read from this file in order to populate OS environment variables
# for all other environments, ansible playbook would create an AWS task definition that would
# then pump these variables and values into the OS Environment for the docker container
# for 'target_app_secrets_ref' the task definition will include the lookup keys, which will be
# fulfilled when the task definition is run
target_app_secrets_ref:
  - DB_PWD: adex-hapi-util-db-pw
    ECS_APIKEY: adex-flask-simple-api-key
    SLACK_APIKEY: slack-webhook-test-key
# for 'target_app_env' the keys and values are exactly included in the task definition
target_app_env:
  - name: DB_HOST
    value: adexutilsportal-dev-oracle-standalone.cjj6jzpn2twl.us-east-1.rds.amazonaws.com
  - name: DB_PORT
    value: 8003
  - name: DB_INSTANCE
    value: DMAUTDV
  - name: DB_USER
    value: cap
  - name: APP_NAME
    value: Flask Simple API
  - name: APP_DESCRIPTION
    value: Flask Simple API provides a template for starting a flask-based api that runs in a Docker container and that is deployable to AWS using a set of ansible scripts.
  - name: DB_TABLE_DEPT
    value: DEPT
  - name: DB_TABLE_EMP
    value: EMP

deploy_type: app
target_app_name: adex-flask-simple-api
